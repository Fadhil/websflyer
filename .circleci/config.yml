version: 2
jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.7.3
        environment:
          MIX_ENV: prod
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          keys:
            - mix-packages-{{ checksum "mix.lock" }}
            - mix-packages-{{ .Branch }}
            - mix-packages
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}
            - build-cache
      - run: mix deps.get
      - save_cache:
          key: mix-packages-{{ checksum "mix.lock" }}
          paths: deps
      - save_cache:
          key: mix-packages-{{ .Branch }}
          paths: deps
      - save_cache:
          key: mix-packages
          paths: deps
      - run: mix compile
      - save_cache:
          key: build-cache-{{ .Branch }}
          paths: _build
      - save_cache:
          key: build-cache
          paths: _build
      - run: mix release
      - persist_to_workspace:
          root: _build/prod/rel/websflyer
          paths: releases
  deploy_staging:
    parallelism: 1
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: sudo pip install awscli
      - run: |
          echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_STAGING"' >> $BASH_ENV
          echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_STAGING"' >> $BASH_ENV
          echo 'export REVISION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
          source $BASH_ENV
      - run: aws s3 cp /tmp/workspace/releases/$REVISION/websflyer.tar.gz s3://websflyer-ci-builds-staging/releases/$REVISION.tar.gz
  deploy_production:
    parallelism: 1
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: sudo pip install awscli
      - run: |
          echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_PRODUCTION"' >> $BASH_ENV
          echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_PRODUCTION"' >> $BASH_ENV
          echo 'export REVISION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
          source $BASH_ENV
      - run: aws s3 cp /tmp/workspace/releases/$REVISION/websflyer.tar.gz s3://websflyer-ci-builds-production/releases/$REVISION.tar.gz
  packer_deploy_staging:
    parallelism: 1
    docker:
      - image: hashicorp/packer:1.2.5
    steps:
      - run:
          name: Install OpenSSH
          command: apk --no-cache add openssh
      - run:
          name: Install python 2.7
          command: apk --no-cache add python python-dev py-pip
      - run:
          name: Install Other Build Dependencies
          command: apk --no-cache add libffi-dev build-base openssl-dev
      - checkout
      - run: pip install --upgrade -r packer/requirements.txt
      - run: |
          echo 'export WEBSFLYER_RELEASE_ARCHIVE=$(echo $CIRCLE_SHA1 | cut -c -7).tar.gz' >> $BASH_ENV
          echo 'export WEBSFLYER_RELEASE_ENV=staging' >> $BASH_ENV
          echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_STAGING"' >> $BASH_ENV
          echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_STAGING"' >> $BASH_ENV
          echo 'export PACKER_AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_STAGING"' >> $BASH_ENV
          echo 'export PACKER_AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_STAGING"' >> $BASH_ENV
          echo 'export PACKER_AWS_ACCOUNT_ID="$PACKER_AWS_ACCOUNT_ID_STAGING"' >> $BASH_ENV
          source $BASH_ENV
      - run: (cd packer && packer build -only=amazon-ebs websflyer-release-image.json)
      - run: (cd packer && ansible-playbook -i ansible/inventories/staging ansible/websflyer-trigger-deploy.yml)
  packer_deploy_production:
    parallelism: 1
    docker:
      - image: hashicorp/packer:1.2.5
    steps:
      - run:
          name: Install OpenSSH
          command: apk --no-cache add openssh
      - run:
          name: Install python 2.7
          command: apk --no-cache add python python-dev py-pip
      - run:
          name: Install Other Build Dependencies
          command: apk --no-cache add libffi-dev build-base openssl-dev
      - checkout
      - run: pip install --upgrade -r packer/requirements.txt
      - run: |
          echo 'export WEBSFLYER_RELEASE_ARCHIVE=$(echo $CIRCLE_SHA1 | cut -c -7).tar.gz' >> $BASH_ENV
          echo 'export WEBSFLYER_RELEASE_ENV=production' >> $BASH_ENV
          echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_PRODUCTION"' >> $BASH_ENV
          echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_PRODUCTION"' >> $BASH_ENV
          echo 'export PACKER_AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_PRODUCTION"' >> $BASH_ENV
          echo 'export PACKER_AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_PRODUCTION"' >> $BASH_ENV
          echo 'export PACKER_AWS_ACCOUNT_ID="$PACKER_AWS_ACCOUNT_ID_PRODUCTION"' >> $BASH_ENV
          source $BASH_ENV
      - run: (cd packer && packer build -only=amazon-ebs websflyer-release-image.json)
      - run: (cd packer && ansible-playbook -i ansible/inventories/production ansible/websflyer-trigger-deploy.yml)
workflows:
  version: 2
  build_then_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy_production:
          requires:
            - build
          filters:
            tags:
              only: /production/
            branches:
              ignore: /.*/
      - deploy_staging:
          requires:
            - build
          filters:
            tags:
              only: /staging/
            branches:
              ignore: /.*/
      - packer_deploy_production:
          requires:
            - deploy_production
          filters:
            tags:
              only: /production/
            branches:
              ignore: /.*/
      - packer_deploy_staging:
          requires:
            - deploy_staging
          filters:
            tags:
              only: /staging/
            branches:
              ignore: /.*/
